0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g', 'node-static' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose cache add [ 'node-static', null ]
5 verbose cache add name=undefined spec="node-static" args=["node-static",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'node-static',
6 verbose parsed url   path: 'node-static',
6 verbose parsed url   href: 'node-static' }
7 silly lockFile 17070c41-node-static node-static
8 verbose lock node-static /Users/aaron/.npm/17070c41-node-static.lock
9 silly lockFile 17070c41-node-static node-static
10 silly lockFile 17070c41-node-static node-static
11 verbose addNamed [ 'node-static', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 5704b874-node-static node-static@
14 verbose lock node-static@ /Users/aaron/.npm/5704b874-node-static.lock
15 silly addNameRange { name: 'node-static', range: '*', hasData: false }
16 verbose url raw node-static
17 verbose url resolving [ 'https://registry.npmjs.org/', './node-static' ]
18 verbose url resolved https://registry.npmjs.org/node-static
19 info trying registry request attempt 1 at 01:06:55
20 verbose etag "3NZDPN7B58BRFEX6E7E03IAV3"
21 http GET https://registry.npmjs.org/node-static
22 http 304 https://registry.npmjs.org/node-static
23 silly registry.get cb [ 304,
23 silly registry.get   { date: 'Tue, 02 Sep 2014 05:06:59 GMT',
23 silly registry.get     server: 'Apache',
23 silly registry.get     via: '1.1 varnish',
23 silly registry.get     'last-modified': 'Tue, 02 Sep 2014 05:06:59 GMT',
23 silly registry.get     'cache-control': 'max-age=60',
23 silly registry.get     etag: '"3NZDPN7B58BRFEX6E7E03IAV3"',
23 silly registry.get     'x-served-by': 'cache-jfk1029-JFK',
23 silly registry.get     'x-cache': 'HIT',
23 silly registry.get     'x-cache-hits': '1',
23 silly registry.get     'x-timer': 'S1409634419.362187,VS0,VE13',
23 silly registry.get     vary: 'Accept',
23 silly registry.get     'content-length': '0',
23 silly registry.get     'keep-alive': 'timeout=10, max=50',
23 silly registry.get     connection: 'Keep-Alive' } ]
24 verbose etag node-static from cache
25 silly addNameRange number 2 { name: 'node-static', range: '*', hasData: true }
26 silly addNameRange versions [ 'node-static',
26 silly addNameRange   [ '0.5.6',
26 silly addNameRange     '0.5.7',
26 silly addNameRange     '0.5.8',
26 silly addNameRange     '0.5.9',
26 silly addNameRange     '0.6.0',
26 silly addNameRange     '0.6.1',
26 silly addNameRange     '0.6.2',
26 silly addNameRange     '0.6.3',
26 silly addNameRange     '0.6.4',
26 silly addNameRange     '0.6.5',
26 silly addNameRange     '0.6.6',
26 silly addNameRange     '0.6.7',
26 silly addNameRange     '0.6.8',
26 silly addNameRange     '0.6.9',
26 silly addNameRange     '0.7.0',
26 silly addNameRange     '0.7.1',
26 silly addNameRange     '0.7.2',
26 silly addNameRange     '0.7.3',
26 silly addNameRange     '0.7.4' ] ]
27 verbose addNamed [ 'node-static', '0.7.4' ]
28 verbose addNamed [ '0.7.4', '0.7.4' ]
29 silly lockFile 2e60e888-node-static-0-7-4 node-static@0.7.4
30 verbose lock node-static@0.7.4 /Users/aaron/.npm/2e60e888-node-static-0-7-4.lock
31 silly lockFile 2e60e888-node-static-0-7-4 node-static@0.7.4
32 silly lockFile 2e60e888-node-static-0-7-4 node-static@0.7.4
33 silly lockFile 5704b874-node-static node-static@
34 silly lockFile 5704b874-node-static node-static@
35 silly resolved [ { name: 'node-static',
35 silly resolved     description: 'simple, compliant file streaming module for node',
35 silly resolved     url: 'http://github.com/cloudhead/node-static',
35 silly resolved     keywords: [ 'http', 'static', 'file', 'server' ],
35 silly resolved     author: { name: 'Alexis Sellier', email: 'self@cloudhead.net' },
35 silly resolved     contributors: [ [Object] ],
35 silly resolved     repository: { type: 'git', url: 'http://github.com/cloudhead/node-static' },
35 silly resolved     main: './lib/node-static',
35 silly resolved     scripts: { test: 'vows --spec --isolate' },
35 silly resolved     bin: { static: 'bin/cli.js' },
35 silly resolved     license: 'MIT',
35 silly resolved     dependencies: { optimist: '>=0.3.4', colors: '>=0.6.0', mime: '>=1.2.9' },
35 silly resolved     devDependencies: { request: 'latest', vows: 'latest' },
35 silly resolved     version: '0.7.4',
35 silly resolved     engines: { node: '>= 0.4.1' },
35 silly resolved     readme: 'node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n```js\nvar static = require(\'node-static\');\n\n//\n// Create a node-static server instance to serve the \'./public\' folder\n//\nvar file = new static.Server(\'./public\');\n\nrequire(\'http\').createServer(function (request, response) {\n    request.addListener(\'end\', function () {\n        //\n        // Serve files!\n        //\n        file.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n```js\nnew static.Server();\n```\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n```js\nnew static.Server(\'./public\');\n```\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n```js\nnew static.Server(\'./public\', { cache: 3600 });\n```\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n```js \nvar static = require(\'node-static\');\n\nvar fileServer = new static.Server(\'./public\');\n\nrequire(\'http\').createServer(function (request, response) {\n    request.addListener(\'end\', function () {\n        fileServer.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n```js\nfileServer.serveFile(\'/error.html\', 500, {}, request, response);\n```\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn\'t found:\n\n```js\nrequire(\'http\').createServer(function (request, response) {\n    request.addListener(\'end\', function () {\n        fileServer.serve(request, response, function (e, res) {\n            if (e && (e.status === 404)) { // If the file wasn\'t found\n                fileServer.serveFile(\'/not-found.html\', 404, {}, request, response);\n            }\n        });\n    }).resume();\n}).listen(8080);\n```\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n```js\nvar static = require(\'node-static\');\n    \nvar fileServer = new static.Server(\'./public\');\n\nrequire(\'http\').createServer(function (request, response) {\n    request.addListener(\'end\', function () {\n        fileServer.serve(request, response, function (err, result) {\n            if (err) { // There was an error serving the file\n                sys.error("Error serving " + request.url + " - " + err.message);\n\n                // Respond to the client\n                response.writeHead(err.status, err.headers);\n                response.end();\n            }\n        });\n    }).resume();\n}).listen(8080);\n```\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn\'t found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n```js\nfileServer.serve(request, response).addListener(\'error\', function (err) {\n    sys.error("Error serving " + request.url + " - " + err.message);\n});\n```\n\nWith this method, you don\'t have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: "myserver" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ \'X-Hello\': \'World!\' }`\n\n> defaults to `{}`\n\n#### `gzip` #\n\nEnable support for sending compressed responses.  This will enable a check for a\nfile with the same name plus \'.gz\' in the same folder.  If the compressed file is\nfound and the client has indicated support for gzip file transfer, the contents\nof the .gz file will be sent in place of the uncompressed file along with a\nContent-Encoding: gzip header to inform the client the data has been compressed.\n\nexample: `{ gzip: true }`\nexample: `{ gzip: /^\\/text/ }`\n\nPassing `true` will enable this check for all files.\nPassing a RegExp instance will only enable this check if the content-type of the\nrespond would match that RegExp using its test() method.\n\n> Defaults to `false`\n\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n```sh\n$ npm install -g node-static\n```\n\n### Example Usage #\n\n```sh\n# serve up the current directory\n$ static\nserving "." at http://127.0.0.1:8080\n\n# serve up a different directory\n$ static public\nserving "public" at http://127.0.0.1:8080\n\n# specify additional headers (this one is useful for development)\n$ static -H \'{"Cache-Control": "no-cache, must-revalidate"}\'\nserving "." at http://127.0.0.1:8080\n\n# set cache control max age\n$ static -c 7200\nserving "." at http://127.0.0.1:8080\n\n# show help message, including all options\n$ static -h\n```\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     bugs: { url: 'https://github.com/cloudhead/node-static/issues' },
35 silly resolved     homepage: 'https://github.com/cloudhead/node-static',
35 silly resolved     _id: 'node-static@0.7.4',
35 silly resolved     _shasum: '026fb71271981380eb4aea7f9fdbb69b4692aabf',
35 silly resolved     _from: 'node-static@',
35 silly resolved     _resolved: 'https://registry.npmjs.org/node-static/-/node-static-0.7.4.tgz' } ]
36 info install node-static@0.7.4 into /usr/local/lib
37 info installOne node-static@0.7.4
38 info /usr/local/lib/node_modules/node-static unbuild
39 verbose tar unpack /Users/aaron/.npm/node-static/0.7.4/package.tgz
40 silly lockFile a82cd5cb-cal-lib-node-modules-node-static tar:///usr/local/lib/node_modules/node-static
41 verbose lock tar:///usr/local/lib/node_modules/node-static /Users/aaron/.npm/a82cd5cb-cal-lib-node-modules-node-static.lock
42 silly lockFile 1d719c00-pm-node-static-0-7-4-package-tgz tar:///Users/aaron/.npm/node-static/0.7.4/package.tgz
43 verbose lock tar:///Users/aaron/.npm/node-static/0.7.4/package.tgz /Users/aaron/.npm/1d719c00-pm-node-static-0-7-4-package-tgz.lock
44 silly gunzTarPerm modes [ '755', '644' ]
45 error Error: EACCES, mkdir '/usr/local/lib/node_modules/node-static'
45 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/node-static']
45 error   errno: 3,
45 error   code: 'EACCES',
45 error   path: '/usr/local/lib/node_modules/node-static',
45 error   fstream_type: 'Directory',
45 error   fstream_path: '/usr/local/lib/node_modules/node-static',
45 error   fstream_class: 'DirWriter',
45 error   fstream_stack:
45 error    [ '/usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
45 error      '/usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
45 error      'Object.oncomplete (fs.js:107:15)' ] }
46 error Please try running this command again as root/Administrator.
47 error System Darwin 13.3.0
48 error command "node" "/usr/local/bin/npm" "install" "-g" "node-static"
49 error cwd /Users/aaron/code/nodejs/hack
50 error node -v v0.10.28
51 error npm -v 1.4.9
52 error path /usr/local/lib/node_modules/node-static
53 error fstream_path /usr/local/lib/node_modules/node-static
54 error fstream_type Directory
55 error fstream_class DirWriter
56 error code EACCES
57 error errno 3
58 error stack Error: EACCES, mkdir '/usr/local/lib/node_modules/node-static'
59 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23
59 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53
59 error fstream_stack Object.oncomplete (fs.js:107:15)
60 verbose exit [ 3, true ]
