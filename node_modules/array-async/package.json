{
  "name": "array-async",
  "version": "3.0.0",
  "description": "FuturesJS/ArrayAsync - The diet cola of asynchronous array utilities.",
  "homepage": "https://github.com/FuturesJS/ArrayAsync",
  "main": "array-async.js",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/FuturesJS/ArrayAsync.git"
  },
  "keywords": [
    "futuresjs",
    "forEach",
    "every",
    "some",
    "map",
    "reduce",
    "reduceRight",
    "filter",
    "forEachAsync",
    "everyAsync",
    "someAsync",
    "mapAsync",
    "reduceAsync",
    "reduceRightAsync",
    "filterAsync",
    "async"
  ],
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.com/"
  },
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/FuturesJS/ArrayAsync/issues"
  },
  "readme": "ArrayAsync\n===\n\nv3.x - Diet Cola Edition\n\nArrayAsync provides asynchronous counterparts for each of the Array iterate methods\n\n  * `forEachAsync`\n  * `everyAsync`\n  * `someAsync`\n  * `filterAsync`\n  * `mapAsync`\n  * `reduceAsync`\n  * `reduceRightAsync`\\* (uses reversed copy of original array)\n\nEach of the other array methods is a thin (12-line long) wrapper around the\ndiet (27-line long) [`forEachAsync`](https://github.com/FuturesJS/forEachAsync),\nwhich is the core workhorse.\n\nWhere size is a concern and you don't need all 86 lines of code,\nI would invite you to simply look at the source and copy/paste\nwhat you need (and attribute, of course).\n\nBrowser Installation\n===\n\n```bash\nbower install ArrayAsync\n```\n\n```html\n<script src=\"https://raw.github.com/FuturesJS/forEachAsync/master/forEachAsync.js\"></script>\n<script src=\"https://raw.github.com/FuturesJS/ArrayAsync/master/array-async.js\"></script>\n```\n\n```javascript\n(function () {\n  'use strict';\n\n  var filterAsync = window.filterAsync\n    ;\n\n  filterAsync(['dogs', 'cats', 'octocats'], function (next, element) {\n    askTheUserIfTheyLikeThis(element, function (likesIt) {\n      next(likesIt);\n    });\n  }).then(function (newArr) {\n    showTheUserThingsTheyLike(newArr);\n  });\n}());\n```\n\nNode Installation\n===\n\n```bash\nnpm install array-async\n```\n\n```javascript\n(function () {\n  'use strict';\n\n  var ArrayAsync = require('async-array').filterAsync\n    ;\n\n  filterAsync(['dogs', 'cats', 'octocats'], function (next, element) {\n    askTheUserIfTheyLikeThis(element, function (likesIt) {\n      next(likesIt);\n    });\n  }).then(function (newArr) {\n    showTheUserThingsTheyLike(newArr);\n  });\n}());\n```\n\nDifferent Names for the Same Thing\n===\n\nI'm not sure which is the clear win yet:\n\nCall each \\*Async function as needed\n```javascript\n  var mapAsync = require('array-async').mapAsync\n    ;\n```\n\nUse them attached to ArrayAsync object\n```javascript\n  var ArrayAsync = require('array-async').ArrayAsync\n    ;\n\n  // Access each without the trailing 'Async'\n  ArrayAsync.reduce(arr, fn);\n```\n\nAttach the async methods to Array\n```javascript\n  require('array-async').infect(Array);\n\n  Array.filterAsync(array, fn);\n```\n\nI've been the prototype route before... it was a bad idea.\n",
  "readmeFilename": "README.md",
  "_id": "array-async@3.0.0",
  "_shasum": "83bb472a83a6356d61c28ff924eae52a01a55ba3",
  "_from": "array-async@",
  "_resolved": "https://registry.npmjs.org/array-async/-/array-async-3.0.0.tgz"
}
